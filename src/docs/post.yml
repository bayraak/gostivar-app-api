paths:
  /post:                
    post:                 
      tags:             
        - Post            
      summary: Create Post
      produces:
      - application/json
      parameters:         
      - in: body          
        name: Create Post Request
        description: Creates new post
        required: false   
        schema:          
          $ref: '#/definitions/CreatePostRequest'
      responses:          
        200:
          description: Returns newly created post       
        500:
          description: Server error
    
    get:
      tags:
        - Post
      summary: Get All Posts
      produces:
      - application/json
      responses:          
        200:
          description: Returns posts
          schema:
            $ref: '#/definitions/PostDTOArray'
        500:
          description: Server error
          
  /post/:id:                
    get:                 
      tags:             
        - Post            
      summary: Get Post By Id
      produces:
      - application/json
      parameters:         
      - in: path          
        name: id
        description: Post ID
        type: string
        required: true
      responses:          
        200:
          description: Return single post
          schema:
            $ref: '#/definitions/PostDTO'
        404:
          description: Post not found
        500:
          description: Server error
          
  /post/:id/likes:                
    get:                 
      tags:             
        - Post            
      summary: Get Post Likes
      produces:
      - application/json
      parameters:         
      - in: path          
        description: Post ID
        name: id
        type: string
        required: true
      responses:          
        200:
          description: Returns likes of given post
          schema:
            $ref: '#/definitions/LikesDTOArray'
        404:
          description: Post not found
        500:
          description: Server error
          
  /post/:id/toggleLike:                
    get:                 
      tags:             
        - Post            
      summary: Toggle Post Like
      produces:
      - application/json
      parameters:         
      - in: path          
        name: id
        type: string
        required: true
      responses:          
        200:
          description: Returns OK
        404:
          description: Post not found
        500:
          description: Server error

  /post/:id/comments:                
    get:                 
      tags:             
        - Post            
      summary: Get Post Comments
      produces:
      - application/json
      parameters:         
      - in: path          
        name: id
        description: Post ID
        type: string
        required: true
      responses:          
        200:
          description: Return post comments
          schema:
            $ref: '#/definitions/CommentsDTOArray'
        404:
          description: Post not found
        500:
          description: Server error
      
    post:                 
      tags:             
        - Post            
      summary: Create Comment
      produces:
      - application/json
      parameters:         
      - in: body          
        name: Create Comment Request
        description: Creates new comment
        required: false   
        schema:          
          $ref: '#/definitions/CreateCommentRequest'
      responses:          
        200:
          description: Returns newly created post
          schema:
            $ref: '#/definitions/CommentDTO'
        400:
          description: Content is required, PostId is required
        403:
          description: Comments are disabled for this pos
        404:
          description: Post not found
        500:
          description: Server error
          
  /post/:id/comments/:commentId:                
    get:                 
      tags:             
        - Post            
      summary: Get Single Comment
      produces:
      - application/json
      parameters:         
      - in: path          
        name: id
        description: Post ID
        type: string
        required: true
      - in: path          
        name: commentId
        description: Comment ID
        type: string
        required: true
      responses:          
        200:
          description: Return single comment
          schema:
            $ref: '#/definitions/CommentDTO'
        400:
          description: CommentId is required, PostId is required
        404:
          description: Post not found, Comment not found
        500:
          description: Server error
          
    delete:                 
      tags:             
        - Post            
      summary: Delete Comment
      produces:
      - application/json
      parameters:         
      - in: path          
        name: id
        description: Post ID
        type: string
        required: true
      - in: path          
        name: commentId
        description: Comment ID
        type: string
        required: true
      responses:          
        200:
          description: Comment is deleted
          schema:
            $ref: '#/definitions/CommentDTO'
        400:
          description: CommentId is required, PostId is required
        403:
          description: Forbidden to delete comment
        404:
          description: Post not found, Comment not found
        500:
          description: Server error

definitions:      
  CreatePostRequest:
    type: object
    properties:
      content:
        type: string
      categoryId:
        type: number
      isCommentsEnabled:
        type: boolean
  PostDTOArray:
    type: array
    items:
      $ref: '#/definitions/PostDTO'
  PostDTO:
    type: object
    properties:
      id: 
        type: string
      content: 
        type: string
      likeCount: 
        type: number
      commentsCount: 
        type: number
      isDeleted:
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
      isCommentsEnabled:
        type: boolean
      isLiked:
        type: boolean
      category:
        $ref: '#/definitions/CategoryDTO'
      user:
        $ref: '#/definitions/UserDTO'
      
  CategoryDTO:
    type: object
    properties:
      id:
        type: number
      name:
        type: string
  
  UserDTO:
    type: object
    properties:
      id:
        type: number
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      
  LikesDTO:
    type: object
    properties:
      userId:
        type: number
      postId:
        type: string
      user:
        $ref: '#/definitions/UserDTO'
        
  LikesDTOArray:
    type: array
    items:
      $ref: '#/definitions/LikesDTO'

  CreateCommentRequest:
    type: object
    properties:
      content:
        type: string
        
  CommentDTO:
    type: object
    properties:
      id: 
        type: string
      content:
        type: string
      isDeleted: 
        type: boolean
      createdAt:
        type: string
      updatedAt:
        type: string
      post:
        $ref: '#/definitions/PostDTO'
      user:
        $ref: '#/definitions/UserDTO'
        
  CommentsDTOArray:
    type: array
    items:
      $ref: '#/definitions/CommentDTO'